g++ -O2 program.cpp -o program -std=c++11

sort(v.begin(), v.end(), [&](int a, int b) { return a < b; });

-----------------------------------------------
TOC:
- template ==
- check program's memory usage ==
- grammar parser (from tutor) ==
- knapsack ==
- Longest increasing subsequence - LIS (nlog(n)) ==
- coin change ==
- dijkstra ==
- Bellman Ford ==
- Bellman Ford faster ==
- Floyd Warshall ==
- topological sort ==
- finding bridges ==
- finding articulation points
- strongly connected components (Tarjan's algorithm) ==
- next-permutation ==
- disjoint set union (DSU / union-find) ==
- kruskal's minimum spanning tree (MST) ==
- Tarjan's offline algorithm for lowest common ancestor (LCA) ==
- Maximum flow - Ford-Fulkerson and Edmonds-Karp ==
- Hungarian algorithm (minimum cost assignment algorithm) ==
- KMP algorithm ==
- Aho Corasick
- Edit distance (DP) ==
- Trie ==
- Fast exponentiation ==
- Modulo of division - Fermat's little theorem idea ==
- GCD - Euclidean algorithm ==
- Binomial coefficients == 
- Segment tree ==
- 

-----------------------------------------------
# template


// compile (for debugging): g++ -Wall -Wextra -fsanitize=undefined,address -D_GLIBCXX_DEBUG -g <file>
// compile (as on judge): g++ -x c++ -Wall -O2 -static -pipe <file>
// Output file will be a.out in both cases
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

#define debug(x) \
    (cerr << #x << ": " << (x) << endl)

int main() {
    // fast IO
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);


    return 0;
}

-----------------------------------------------
# check program's memory usage

#include <sys/resource.h>

long get_mem_usage() {
    // total memory including the ones saved in paging files in bytes
    struct rusage resourceUsage;

    getrusage(RUSAGE_SELF, &resourceUsage);
    return resourceUsage.ru_maxrss;
}


-----------------------------------------------

# grammar parser (from tutor)

// Parser for the grammar of the tasks sumup, covering and simplify.

#include <bits/stdc++.h>
using namespace std;


struct tree {
    vector<shared_ptr<tree>> children;
    char op = 0;
    long long value = -1;

    tree(vector<shared_ptr<tree>> children, char op): children(children), op(op) {}
    explicit tree(long long value): value(value) {}
};


string expression;
int pos;

shared_ptr<tree> parse_stree();

shared_ptr<tree> parse_tree()
{
    vector<shared_ptr<tree>> children;
    char op = expression[pos];
    ++pos;
    while (expression[pos] != ')') {
        ++pos;
        children.push_back(parse_stree());
    }
    ++pos;
    return make_shared<tree>(children, op);
}

shared_ptr<tree> parse_int()
{
    int result = 0;
    while (expression[pos] >= '0' && expression[pos] <= '9') {
        result = 10 * result + expression[pos] - '0';
        ++pos;
    }
    return make_shared<tree>(result);
}

shared_ptr<tree> parse_stree()
{
    char c = expression[pos];
    if (c == '+' || c == '*') {
        return parse_tree();
    } else {
        return parse_int();
    }
}


int main()
{
    ios_base::sync_with_stdio(false);

    getline(cin, expression);
    shared_ptr<tree> t = parse_stree();

    // TODO: Do something with t
}


-----------------------------------------------
# knapsack

#include <bits/stdc++.h>
using namespace std;
int knapSack(int W, int wt[], int val[], int n)
{
    // making and initializing dp array
    int dp[W + 1];
    memset(dp, 0, sizeof(dp));
 
    for (int i = 1; i < n + 1; i++) {
        for (int w = W; w >= 0; w--) {
 
            if (wt[i - 1] <= w)
                // finding the maximum value
                dp[w] = max(dp[w],
                            dp[w - wt[i - 1]] + val[i - 1]);
        }
    }
    return dp[W]; // returning the maximum value of knapsack
}
int main()
{
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
    cout << knapSack(W, wt, val, n);
    return 0;
}

-----------------------------------------------
# next-permutation

#include <iostream>
#include <string>
#include <array>
#include <algorithm>

using namespace std;

int main() {
    // fast IO
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);  

    const int N = 11;
    int grid[N][N];

    for (int i=0; i<N; i++) {
        for (int j=0; j<N; j++) {
            cin >> grid[i][j];
        }
    }

    int ans = -1e8;
    array<int, N> choice = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,};
    do {
        int sum = 0;
        for (int i=0; i < N; i++) {
            sum += grid[i][choice[i]];
        }
        ans = max(ans, sum);
    } while (next_permutation(choice.begin(), choice.end()));
    cout << ans << "\n";
}


-----------------------------------------------
# Longest increasing subsequence - LIS (nlog(n))


#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int main() {
    // fast IO
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, x;
    cin >> n >> x;

    int arr[n];
    for (int i=0; i<n; i++) {
        cin >> arr[i];
    }

    // Is there a subsequence with the given length? If so then what is the smallest item at the end of it?
    // This array will be monotonically increasing, therefore we can do binary search in it
    vector<int> length_ending_at;

    int dp[n];
    int ans = 1;
    for (int i=0; i<n; i++) {
        int max_len_in_left;
        int index = lower_bound(length_ending_at.begin(), length_ending_at.end(), arr[i]) - length_ending_at.begin();
        if (index == length_ending_at.size())
            max_len_in_left = length_ending_at.size();
        else
            max_len_in_left = index;
        dp[i] = 1 + max_len_in_left;
        ans = max(ans, dp[i]);
        if (dp[i] > length_ending_at.size()) {
            length_ending_at.push_back(arr[i]);
        }
        length_ending_at[dp[i]-1] = min(length_ending_at[dp[i]-1], arr[i]);
    }

    cout << ans << "\n";
}

-----------------------------------------------
# coin change


// C++ program for coin change problem.
#include<bits/stdc++.h>
 
using namespace std;
 
int count( int S[], int m, int n )
{
    int i, j, x, y;
 
    // We need n+1 rows as the table
    // is constructed in bottom up
    // manner using the base case 0
    // value case (n = 0)
    int table[n + 1][m];
     
    // Fill the entries for 0
    // value case (n = 0)
    for (i = 0; i < m; i++)
        table[0][i] = 1;
 
    // Fill rest of the table entries
    // in bottom up manner
    for (i = 1; i < n + 1; i++)
    {
        for (j = 0; j < m; j++)
        {
            // Count of solutions including S[j]
            x = (i-S[j] >= 0) ? table[i - S[j]][j] : 0;
 
            // Count of solutions excluding S[j]
            y = (j >= 1) ? table[i][j - 1] : 0;
 
            // total count
            table[i][j] = x + y;
        }
    }
    return table[n][m - 1];
}
 
// Driver Code
int main()
{
    int arr[] = {1, 2, 3};
    int m = sizeof(arr)/sizeof(arr[0]);
    int n = 4;
    cout << count(arr, m, n);
    return 0;
}


-----------------------------------------------
# dijkstra


#include <iostream>
#include <queue>
#include <vector>
#include <utility>
#include <limits>

using namespace std;

typedef long long ll;

ll dijkstra(ll src, ll dest, ll n, vector<vector<pair<ll,ll>>>& graph) {
    // NOTE: it follows index starting at 1
    // doesn't work with -ve weight
    // u -> (v, w) form, where w = weight of connection u -> v
    auto compare = [&](pair<ll,ll> p1, pair<ll,ll> p2) { return p1.second > p2.second; };
    priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, decltype(compare)> pq(compare);
    
    const auto INF = numeric_limits<ll>::max();
    vector<ll> dist(n+1, INF);
    
    pq.push(make_pair(src, 0));
    dist[src] = 0;

    while (!pq.empty()) {
        auto front = pq.top(); pq.pop();
        ll v = front.first, d = front.second;
        if (d > dist[v]) continue;
        for (auto p: graph[v]) {
            ll u = p.first;
            ll w = p.second;
            if (dist[u] > dist[v] + w) {
                dist[u] = dist[v] + w;
                pq.push({u, dist[u]});
            }
        }
    }

    return dist[dest] == INF ? -1 : dist[dest];
}

int main() {
    // fast io
    ios_base::sync_with_stdio(true);
    cin.tie(NULL);

    int v, e, k;
    cin >> v >> e >> k;

    vector<vector<pair<ll,ll>>> graph(v+1);
    while (e--) {
        ll a, b, l;
        cin >> a >> b >> l;
        graph[a].push_back(make_pair(b, l));
    }

    cout << dijkstra(1, v, v, graph) << endl;
}


-----------------------------------------------
# topological sort

#include <iostream>
#include <map>
#include <vector>
#include <string>


using namespace std;

bool dfs(int root, vector<vector<int>>& graph, vector<bool>& explored, vector<bool>& dirty, vector<int>& explored_nodes) {
    dirty[root] = true;
    for (auto child: graph[root]) {
        if (explored[child]) continue;
        if (dirty[child]) return false;
        if (!dfs(child, graph, explored, dirty, explored_nodes)) return false;
    }
    explored[root] = true;
    explored_nodes.push_back(root);
    return true;
}


vector<int> topsort(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<bool> explored(n, false);
    vector<bool> dirty(n, false);
    vector<int> explored_nodes;
    vector<int> ans;
    for (int i=0; i<n; i++) {
        if (explored[i]) continue;
        if (!dfs(i, graph, explored, dirty, explored_nodes))
            return ans;
    }
    for (int i=n-1; i>=0; i--) {
        ans.push_back(explored_nodes[i]);
    }
    return ans;
}


int main() {
    // fast io
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int m;
    cin >> m;

    map<string, int> name2num;
    map<int, string> num2name;

    vector<vector<int>> graph;

    int n = 0;
    while (m--) {
        string a, op, b;
        cin >> a >> op >> b;
        if (op == "<") {
            string temp = a;
            a = b;
            b = temp;
        }
        if (name2num.find(a) == name2num.end()) {
            n++;
            name2num[a] = n-1;
            num2name[n-1] = a;
            vector<int> v;
            graph.push_back(v);
        }
        if (name2num.find(b) == name2num.end()) {
            n++;
            name2num[b] = n-1;
            num2name[n-1] = b;
            vector<int> v;
            graph.push_back(v);
        }
        int u = name2num[a];
        int v = name2num[b];
        graph[u].push_back(v);
    }

    vector<int> topsorted = topsort(graph);
    if (topsorted.size() == 0) {
        cout << "impossible" << "\n";
        return 0;
    }
    cout << "possible" << "\n";
    for (auto it: topsorted) {
        cout << num2name[it] << " ";
    }
    cout << "\n";
}


-----------------------------------------------
# Bellman Ford

vector<int> dist(V, INF);
dist[start] = 0;
for (int i=0; i < V - 1: i++) 
    for (int v = 0; v < V; u++) 
        for (auto p: adj[v]) {
            int u = p.first;
            int w = p.second;
            dist[u] = min(dist[u], dist[v] + w);
        }



-----------------------------------------------
# Bellman Ford faster

vector<int> dist (V, INF);
queue<int> Q;
vector<bool> inQ (V, false);
dist[start] = 0; Q.push(start); inQ[start] = true;
while (!Q.empty()) {
    int v = Q.front(); Q.pop(); inQ[v] = false;
    for (auto p: adj[v]) {
        int u = p.first;
        int w = p.second;
        if (dist[u] > dist[v] + w) {
            dist[u] = dist[v] + w;
            if (!inQ[u]) {
                Q.push(u);
                inQ[u] = true;
            }
        }
    }
}

-----------------------------------------------
# Floyd Warshall

vector<vector<int>> adj; // adjacency matrix!
for (int k=0; k < V; k++) 
    for (int i=0; i < V; i++) 
        for (int j=0; j < V; j++) 
            adj[i][j] = min(adj[i][j], adj[i][k] + adj[k][j]);


-----------------------------------------------
# strongly connected components (Tarjan's algorithm)

void dfsForSCC(int root, int& pos, vector<int>& position, vector<int>& minReach, stack<int>& stk, vector<bool>& inStack, vector<vector<int>>& scc, vector<vector<int>>& graph) {
    position[root] = pos;
    minReach[root] = pos;
    pos += 1;
    stk.push(root);
    inStack[root] = true;

    for (int it: graph[root]) {
        if (position[it] == -1) {
            dfsForSCC(it, pos, position, minReach, stk, inStack, scc, graph);
            minReach[root] = min(minReach[root], minReach[it]);
        } else if (inStack[it]) {
            // back edge
            minReach[root] = min(minReach[root], minReach[it]);
        }
    }

    if (position[root] == minReach[root]) {
        vector<int> comps;
        while (true) {
            int nd = stk.top(); stk.pop();
            inStack[nd] = false;
            comps.push_back(nd);
            if (position[nd] == minReach[nd]) {
                break;
            }
        }
        scc.push_back(comps);
    }
}


vector<vector<int>> tarjanSCC(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<vector<int>> scc;
    vector<int> position(n, -1);
    vector<int> minReach(n, -1);
    stack<int> stk;
    vector<bool> inStack(n, false);
    int pos = 0;

    for (int i=0; i<n; i++) {
        if (position[i] == -1) {
            dfsForSCC(i, pos, position, minReach, stk, inStack, scc, graph);
        }
    }

    return scc;
}


-----------------------------------------------
# finding bridges

int bridgeDFS(int root, int parent, int& pos, vector<int>& position, vector<int>& minReach, vector<bool>& explored, vector<vector<int>>& graph) {
    position[root] = pos;
    minReach[root] = pos;
    pos += 1;
    for (int node: graph[root]) {
        if (explored[node]) continue;
        if (node == parent) continue;
        if (position[node] == -1) {
            minReach[root] = min(minReach[root], bridgeDFS(node, root, pos, position, minReach, explored, graph));
            continue;
        }
        minReach[root] = min(minReach[root], position[node]);
    }
    explored[root] = true;
    return minReach[root];
}


vector<pair<int,int>> findBridges(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<bool> explored(n, false);
    vector<int> position(n, -1);
    vector<int> minReach(n, -1);
    int pos = 0;

    for (int i=0; i<n; i++) {
        if (!explored[i]) 
            bridgeDFS(i, -1, pos, position, minReach, explored, graph);
    }

    vector<pair<int,int>> bridges;
    for (int u=0; u<n; u++) {
        for (int v: graph[u]) {
            if (minReach[v] > position[u]) {
                bridges.push_back({u, v});
            }
        }
    }

    return bridges;
}

-----------------------------------------------
# disjoint set union (DSU / union-find)

class UnionFind {
private:
    int n;
    int* parent;
    int* size;
public:
    UnionFind(int n) {
        this->n = n;
        parent = new int[n];
        size = new int[n];
        for (int i=0; i<n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findSet(int v) {
        if (v == parent[v])
            return v;
        return parent[v] = findSet(parent[v]);
    }
    bool inSameSet(int u, int v) {
        int st1 = findSet(u);
        int st2 = findSet(v);
        return st1 == st2;
    }
    void unionSets(int u, int v) {
        int pu = findSet(u);
        int pv = findSet(v);
        if (pu == pv) return;
        if (size[pv] > size[pu]) {
            int temp = pu;
            pu = pv;
            pv = temp;
        }
        parent[pv] = pu;
        size[pu] += size[pv];
    }
};

-----------------------------------------------
# kruskal's minimum spanning tree (MST)

auto UF = UnionFind(V);

// <weight, u, v>
vector<tuple<int, int, int>> edgeList;
// sort increasing by weight
sort(edgeList.begin(), edgeList.end());

for (auto edge: edgeList) {
    int w, u, v;
    tie(w, u, v) = edge; // upack tuple
    if (!UF.inSameSet(u, v)) {
        cout << "Add " << u << "-" << v << " to MST" << endl;
        UF.unionSets(u, v);
    }
}

-----------------------------------------------
# Tarjan's offline algorithm for lowest common ancestor (LCA)

reference: https://cp-algorithms.com/graph/lca_tarjan.html#implementation

#include <iostream>
#include <vector>
#include <tuple>
#include <map>
#include <algorithm>

using namespace std;

typedef long long ll;


class UnionFind {
private:
    int n;
    int* parent;
    int* size;
public:
    UnionFind(int n) {
        this->n = n;
        parent = new int[n];
        size = new int[n];
        for (int i=0; i<n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findSet(int v) {
        if (v == parent[v])
            return v;
        return parent[v] = findSet(parent[v]);
    }
    bool inSameSet(int u, int v) {
        int st1 = findSet(u);
        int st2 = findSet(v);
        return st1 == st2;
    }
    void unionSets(int u, int v) {
        int pu = findSet(u);
        int pv = findSet(v);
        if (pu == pv) return;
        if (size[pv] > size[pu]) {
            int temp = pu;
            pu = pv;
            pv = temp;
        }
        parent[pv] = pu;
        size[pu] += size[pv];
    }
};

void dfsForLCA(int u, int parent, vector<vector<int>>& tree, UnionFind& UF, vector<int>& ancestor, vector<bool>& visited, vector<vector<int>>& queries, vector<tuple<int,int,int>>& lca) {
    for (int v: tree[u]) {
        if (v != parent) {
            dfsForLCA(v, u, tree, UF, ancestor, visited, queries, lca);
            UF.unionSets(u, v);
            ancestor[UF.findSet(u)] = u;
        }
    }
    visited[u] = true;
    for (int v: queries[u]) {
        if (visited[v]) {
            lca.push_back(make_tuple(u, v, ancestor[UF.findSet(v)]));
        }
    }
}

vector<tuple<int,int,int>> TarjanLCA(int root, vector<vector<int>>& tree, vector<tuple<int, int>>& lcaQueries) {
    // returns [(u, v, lca),..]
    int n = tree.size();
    vector<tuple<int,int,int>> lca;
    vector<bool> visited(n, false);
    vector<int> ancestor(n);

    for (int i=0; i<n; i++) ancestor[i] = i;
    vector<vector<int>> queries(n);
    for (tuple<int, int> query: lcaQueries) {
        int u, v;
        tie(u, v) = query;
        queries[u].push_back(v);
        queries[v].push_back(u);
    }
    UnionFind UF(n);
    dfsForLCA(root, -1, tree, UF, ancestor, visited, queries, lca);
    return lca;
}

-----------------------------------------------
# Maximum flow - Ford-Fulkerson and Edmonds-Karp

#include <iostream>
#include <vector>
#include <queue>
#include <utility>
#include <limits>
#include <algorithm>

using namespace std;

typedef long long ll;

ll bfsFlow(int s, int t, vector<vector<int>>& graph, vector<vector<ll>>& capacityMatrix, vector<int>& parent) {
    int n = capacityMatrix.size();
    const auto INF = numeric_limits<ll>::max();
    
    for (int i=0; i<n; i++) 
        parent[i] = -1;
    parent[s] = -2;

    queue<pair<int, ll>> q;
    q.push(make_pair(s, INF));

    while (!q.empty()) {
        int u = q.front().first;
        ll flow = q.front().second;
        q.pop();

        for (int v: graph[u]) {
            if (v == u) continue;
            if (parent[v] == -1 && capacityMatrix[u][v] > 0) {
                parent[v] = u;
                ll newFlow = min(flow, capacityMatrix[u][v]);
                if (v == t) 
                    return newFlow;
                q.push(make_pair(v, newFlow));
            }
        }
    }
    return 0;
}

ll maxFlow(int s, int t, vector<vector<int>>& graph, vector<vector<ll>>& capacityMatrix) {
    // there should be edge both ways to allow the algorithm to correct the flow 
    // i.e u -> v & v -> u
    // forward capacity u -> v should be non zero but backward should be zero in the beginning when no 
    // flow has flown in the direction u -> v
    int n = capacityMatrix.size();
    ll flow = 0;
    vector<int> parent(n);

    while (true) {
        ll newFlow = bfsFlow(s, t, graph, capacityMatrix, parent);
        if (newFlow == 0) break;
        flow += newFlow;
        int cur = t;
        while (cur != s) {
            int par = parent[cur];
            capacityMatrix[par][cur] -= newFlow;
            capacityMatrix[cur][par] += newFlow;
            cur = par;
        }
    }

    return flow;
} 

-----------------------------------------------
# KMP algorithm

vector<int> KMP(string needle, string haystack) {
    vector<int> matches;

    int n = haystack.size();
    int m = needle.size();

    vector<int> prefixIsSuffix(m, 0);
    {
        int i = 0, j = 1;
        while (j < m) {
            if (needle[i] == needle[j]) {
                prefixIsSuffix[j] = i + 1;
                i += 1; j += 1;
                continue;
            }
            if (i == 0) {
                prefixIsSuffix[j] = 0;
                j += 1;
                continue;
            }
            i = prefixIsSuffix[i - 1];
        }
    }
    // core matching logic
    int i = 0, j = 0;
    while (i < n) {
        if (haystack[i] == needle[j]) {
            i += 1; j += 1;
            if (j == m) {
                matches.push_back(i - m);
                j = prefixIsSuffix[m - 1];
            }
            continue;
        }
        if (j == 0) {
            i += 1;
            continue;
        }
        j = prefixIsSuffix[j-1];
    }

    return matches;
}

-----------------------------------------------
# Edit distance (DP)

int editDistance(string s, string t) {
    int n = s.size();
    int m = t.size();
    vector<vector<int>> dp(n+1, vector<int>(m+1));
    for (int i=0; i<=n; i++) dp[i][0] = i;
    for (int i=0; i<=m; i++) dp[0][i] = i;
    for (int i=1; i<=n; i++) {
        for (int j=1; j<=m; j++) {
            if (s[i-1] == t[j-1]) {
                dp[i][j] = dp[i-1][j-1];
                continue;
            }
            dp[i][j] = 1 + min({dp[i-1][j-1], dp[i-1][j], dp[i][j-1]});
        }
    }
    return dp[n][m];
}

-----------------------------------------------
# Trie

struct Trie {
    bool isEndOfString = false;
    map<char, Trie*> edges;
    void insert(string &s, int i = 0) {
        if (i == s.length()) {
            isEndOfString = true;
            return;
        }
        if (edges.count(s[i]) == 0)
            edges[s[i]] = new Trie;
        edges[s[i]]->insert(s, i+1);
    }
    bool contains(string &s, int i = 0) {
        if (i == s.length())
            return isEndOfString;
        return edges.count(s[i]) > 0 &&
            edges[s[i]]->contains(s, i+1);
    }
};

-----------------------------------------------
# Segment tree

#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

class SegTree {
private:
    /* 
        DEFAULT_VALUE and rangeOperation should be changed as per the nature of range query in segment tree
        for eg:
            range sum query:
                DEFAULT_VALUE = 0
                rangeOperation(a, b) = a + b
            range min query:
                DEFAULT_VALUE = infinity
                rangeOperation(a, b) = min(a, b)
            range gcd query:
                DEFAULT_VALUE = 0
                rangeOperation(a, b) = gcd(a, b)
    */

    const long long DEFAULT_VALUE = 0;
    long long rangeOperation(long long a, long long b) {
        return gcd(a, b);
    }

    vector<long long> values;
    size_t size;

    int parent(int i) {
        return i / 2;
    }
    int left(int i) {
        return 2 * i;
    }
    int right(int i) {
        return 2 * i + 1;
    }

    void update(int i) {
        values[i] = rangeOperation(values[left(i)], values[right(i)]);
        if (i > 1) update(parent(i));
    }

    // Query operation on interval [i, j)
    // current_node represents the interval [l, r)
    long long query(int i, int j, int l, int r, int current_node) {
        if (l >= j || r <= i) return DEFAULT_VALUE; // current interval and query interval don't intersect
        if (l >= i && r <= j) return values[current_node]; // current interval contained in query interval

        int m = (l + r) / 2;
        return rangeOperation(query(i, j, l, m, left(current_node)), query(i, j, m, r, right(current_node)));
    }

public:
    SegTree(size_t n) {
	    size = 1<<(int)ceil(log2(n));
        values.assign(2 * size, DEFAULT_VALUE);
    }

    SegTree(vector<long long> v): SegTree(v.size()) {
        for (size_t i = 0; i < v.size(); i++) values[i + size] = v[i];
        for (size_t i = size - 1; i > 0; i--) values[i] = rangeOperation(values[left(i)], values[right(i)]);
    }

    // Query sum of interval [i, j)
    // index start from 0
    long long query(int i, int j) {
        return query(i, j, 0, size, 1);
    }

    // Set value at position i to val
    // index start from 0
    void update(int i, long long val) {
        values[i + size] = val;
        update(parent(i + size));
    }

    void display() {
        for (size_t i=0; i < 2 * size; i++) {
            cout << values[i] << " ";
        }
        cout << "\n";
    }
};

-----------------------------------------------
# GCD - Euclidean algorithm

long long gcd(long long a, long long b) {
    if (b > a) {
        long long temp = a;
        a = b;
        b = temp;
    }
    if (b == 0) return a;
    return gcd(b, a % b);
}

-----------------------------------------------
# Fast exponentiation

ll fexp(ll m, ll n, ll p) {
    // Computes m^n modulo p
    if (n == 0) return 1;
    else if (n % 2 == 1)
        return (m * fexp(m, n-1, p)) % p;
    else { // n is even
        ll r = fexp(m, n/2, p);
        return (r * r) % p;
    }
}

-----------------------------------------------
# Modulo of division - Fermat's little theorem idea

By Fermet's little theorem 
mod_inverse(a) = pow(a, p-2) mod p

example:
a = 2, p = 5, mod_inverse(a) = pow(2, 5-2) mod 5 = 8 mod 5 = 3
(8 / 2) mod 5 = (8 * 3) mod 5 = ((8 mod 5) * (3 mod 5)) mod 5 = 9 mod 5 = 4

code:
ll modInverse(ll a, ll mod) {
    return fexp(a, mod-2, mod) % mod;
}

-----------------------------------------------
# Binomial coefficients

(n, k) mod p = (n * .... * (n - k + 1) * mod_inverse(k!)) mod p 
O(k + log(p))

(n, k) = (n-1, k-1) + (n-1, k)
O(n * k)

ll factorial(ll k, ll p) {
    ll retval = 1;
    for (int i=1; i<=k; i++) {
        retval *= i;
        retval %= p;
    }
    return retval;
}

ll choose(ll n, ll k, ll p) {
    // (n, k) mod p -> O(k + log(p))
    ll retval = 1;
    for (int i=0; i<k; i++) {
        retval *= n - i;
        retval %= p;
    }
    retval *= modInverse(factorial(k, p), p);
    retval %= p;
    return retval;
}

-----------------------------------------------
# Hungarian algorithm (minimum cost assignment algorithm)
# complexity: O(n^3)
# copied code from Geeksforgeeks 

#include<bits/stdc++.h>
using namespace std;


class Solution {
public:
	int cost[31][31]; //cost matrix
	int n, max_match; //n workers and n jobs
	int lx[31], ly[31]; //labels of X and Y parts
	int xy[31]; //xy[x] - vertex that is matched with x,
	int yx[31]; //yx[y] - vertex that is matched with y
	bool S[31], T[31]; //sets S and T in algorithm
	int slack[31]; //as in the algorithm description
	int slackx[31]; //slackx[y] such a vertex, that
	int prev_ious[31]; //array for memorizing alternating p

	void init_labels()
	{
		memset(lx, 0, sizeof(lx));
		memset(ly, 0, sizeof(ly));
		for (int x = 0; x < n; x++)
		for (int y = 0; y < n; y++)
		lx[x] = max(lx[x], cost[x][y]);
	}
	
	
	void update_labels()
	{
		int x, y;
		int delta = 99999999; //init delta as infinity
		for (y = 0; y < n; y++) //calculate delta using slack
			if (!T[y])
				delta = min(delta, slack[y]);
		for (x = 0; x < n; x++) //update X labels
			if (S[x])
				lx[x] -= delta;
		for (y = 0; y < n; y++) //update Y labels
			if (T[y])
				ly[y] += delta;
		for (y = 0; y < n; y++) //update slack array
			if (!T[y])
				slack[y] -= delta;
	}
	
	
	void add_to_tree(int x, int prev_iousx)
	//x - current vertex,prev_iousx - vertex from X before x in the alternating path,
	//so we add edges (prev_iousx, xy[x]), (xy[x], x)
	{
		S[x] = true; //add x to S
		prev_ious[x] = prev_iousx; //we need this when augmenting
		for (int y = 0; y < n; y++) //update slacks, because we add new vertex to S
			if (lx[x] + ly[y] - cost[x][y] < slack[y])
			{
				slack[y] = lx[x] + ly[y] - cost[x][y];
				slackx[y] = x;
			}
	}
	
	
	
	void augment() //main function of the algorithm
	{
		if (max_match == n) return; //check whether matching is already perfect
		int x, y, root; //just counters and root vertex
		int q[31], wr = 0, rd = 0; //q - queue for bfs, wr,rd - write and read
		//pos in queue
		memset(S, false, sizeof(S)); //init set S
		memset(T, false, sizeof(T)); //init set T
		memset(prev_ious, -1, sizeof(prev_ious)); //init set prev_ious - for the alternating tree
		
		for (x = 0; x < n; x++) //finding root of the tree
		{
			if (xy[x] == -1)
			{
				q[wr++] = root = x;
				prev_ious[x] = -2;
				S[x] = true;
				break;
			}
		}
		
		for (y = 0; y < n; y++) //initializing slack array
		{
			slack[y] = lx[root] + ly[y] - cost[root][y];
			slackx[y] = root;
		}
		
		//second part of augment() function
		while (true) //main cycle
		{
			while (rd < wr) //building tree with bfs cycle
			{
				x = q[rd++]; //current vertex from X part
				for (y = 0; y < n; y++) //iterate through all edges in equality graph
					if (cost[x][y] == lx[x] + ly[y] && !T[y])
					{
						if (yx[y] == -1) break; //an exposed vertex in Y found, so
												//augmenting path exists!
							T[y] = true; //else just add y to T,
						q[wr++] = yx[y]; //add vertex yx[y], which is matched
						//with y, to the queue
						add_to_tree(yx[y], x); //add edges (x,y) and (y,yx[y]) to the tree
					}
				if (y < n)
					break; //augmenting path found!
			}
			if (y < n)
				break; //augmenting path found!
			
			update_labels(); //augmenting path not found, so improve labeling
			
			wr = rd = 0;
			for (y = 0; y < n; y++)
			//in this cycle we add edges that were added to the equality graph as a
			//result of improving the labeling, we add edge (slackx[y], y) to the tree if
			//and only if !T[y] && slack[y] == 0, also with this edge we add another one
			//(y, yx[y]) or augment the matching, if y was exposed
			if (!T[y] && slack[y] == 0)
			{
				if (yx[y] == -1) //exposed vertex in Y found - augmenting path exists!
				{
					x = slackx[y];
					break;
				}
				else
				{
					T[y] = true; //else just add y to T,
					if (!S[yx[y]])
					{
						q[wr++] = yx[y]; //add vertex yx[y], which is matched with
						//y, to the queue
						add_to_tree(yx[y], slackx[y]); //and add edges (x,y) and (y,
						//yx[y]) to the tree
					}
				}
			}
			if (y < n) break; //augmenting path found!
		}
		
		if (y < n) //we found augmenting path!
		{
			max_match++; //increment matching
			//in this cycle we inverse edges along augmenting path
			for (int cx = x, cy = y, ty; cx != -2; cx = prev_ious[cx], cy = ty)
			{
				ty = xy[cx];
				yx[cy] = cx;
				xy[cx] = cy;
			}
			augment(); //recall function, go to step 1 of the algorithm
		}
	}//end of augment() function
	
	int hungarian()
	{
		int ret = 0; //weight of the optimal matching
		max_match = 0; //number of vertices in current matching
		memset(xy, -1, sizeof(xy));
		memset(yx, -1, sizeof(yx));
		init_labels(); //step 0
		augment(); //steps 1-3
		
		for (int x = 0; x < n; x++) //forming answer there
			ret += cost[x][xy[x]];
	
		return ret;
	}
	
	int assignmentProblem(int Arr[], int N) {
		
		n = N;
		for(int i=0; i<n; i++)
			for(int j=0; j<n; j++)
				cost[i][j] = -1*Arr[i*n+j];
				
		int ans = -1 * hungarian();
		
		return ans;
	}
};

int main()
{
int n=3;
int Arr[3*3]={1500,4000,4500,2000,6000,3500,2000,4000,2500}; /*1500 4000 4500
																2000 6000 3500
																2000 4000 2500*/
Solution ob;
cout<<ob.assignmentProblem(Arr,n)<<endl;
}

-----------------------------------------------
#

