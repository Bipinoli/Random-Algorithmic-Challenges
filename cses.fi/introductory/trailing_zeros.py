'''
Idea:
How to make 10? -> 10 * 1, 2 * 5
So we need to count how many multiples of 10s and 5s are there.
As 2 is available in every even number, we have enough of those.
'''


def F(n):
    # precomputed value for efficiency
    precomputed = [
        (10000000, 2499999),
        (20000000, 4999999),
        (30000000, 7499998),
        (40000000, 9999998),
        (50000000, 12499999),
        (60000000, 14999998),
        (70000000, 17499998),
        (80000000, 19999997),
        (90000000, 22499998),
        (100000000, 24999999),
        (110000000, 27499998),
        (120000000, 29999998),
        (130000000, 32499997),
        (140000000, 34999997),
        (150000000, 37499998),
        (160000000, 39999997),
        (170000000, 42499998),
        (180000000, 44999997),
        (190000000, 47499997),
        (200000000, 49999998),
        (210000000, 52499997),
        (220000000, 54999997),
        (230000000, 57499996),
        (240000000, 59999996),
        (250000000, 62499999),
        (260000000, 64999998),
        (270000000, 67499998),
        (280000000, 69999997),
        (290000000, 72499997),
        (300000000, 74999998),
        (310000000, 77499997),
        (320000000, 79999997),
        (330000000, 82499996),
        (340000000, 84999997),
        (350000000, 87499998),
        (360000000, 89999997),
        (370000000, 92499997),
        (380000000, 94999996),
        (390000000, 97499996),
        (400000000, 99999997),
        (410000000, 102499996),
        (420000000, 104999998),
        (430000000, 107499997),
        (440000000, 109999998),
        (450000000, 112499998),
        (460000000, 114999997),
        (470000000, 117499997),
        (480000000, 119999996),
        (490000000, 122499998),
        (500000000, 124999999),
        (510000000, 127499998),
        (520000000, 129999998),
        (530000000, 132499997),
        (540000000, 134999998),
        (550000000, 137499998),
        (560000000, 139999997),
        (570000000, 142499997),
        (580000000, 144999996),
        (590000000, 147499998),
        (600000000, 149999998),
        (610000000, 152499997),
        (620000000, 154999997),
        (630000000, 157499996),
        (640000000, 159999997),
        (650000000, 162499997),
        (660000000, 164999996),
        (670000000, 167499997),
        (680000000, 169999996),
        (690000000, 172499997),
        (700000000, 174999997),
        (710000000, 177499996),
        (720000000, 179999996),
        (730000000, 182499995),
        (740000000, 184999997),
        (750000000, 187499998),
        (760000000, 189999997),
        (770000000, 192499997),
        (780000000, 194999996),
        (790000000, 197499997),
        (800000000, 199999997),
        (810000000, 202499996),
        (820000000, 204999996),
        (830000000, 207499995),
        (840000000, 209999998),
        (850000000, 212499998),
        (860000000, 214999997),
        (870000000, 217499997),
        (880000000, 219999997),
        (890000000, 222499997),
        (900000000, 224999997),
        (910000000, 227499996),
        (920000000, 229999997),
        (930000000, 232499997),
        (940000000, 234999997),
        (950000000, 237499997),
        (960000000, 239999996),
        (970000000, 242499996),
        (980000000, 244999997),
        (990000000, 247499997),
    ]

    start = 5
    ans = 0

    for (_n, _ans) in reversed(precomputed):
        if n > _n:
            start += _n
            ans = _ans
            break

    
    for i in range(start, n+1, 5):
        while i % 10 == 0:
            # think 1000
            ans += 1
            i /= 10
        while i % 5 == 0:
            # think 25
            ans += 1
            i /= 5
    return ans



def precompute_values():
    for i in range(1_000_000_0, 1_000_000_000, 1_000_000_0):
        print(f"({i}, {int(F(i))}),")

# precompute_values()


n = int(input())
print(int(F(n)))